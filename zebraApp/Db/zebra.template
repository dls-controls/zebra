# % macro, P, Device prefix
# % macro, Q, Device suffix
# % macro, PORT, Asyn port and object name
# % macro, NELM, Maximum number of elements in position compare array
# % macro, EMPTY, Empty macro to satisfy VDCT
# % macro, PREC, Precision to show position compare gate and pulse fields
# % macro, M1, Motor 1 PV
# % macro, M1DIR, Set to - if motor inverted in geobrick (decode control = 3 instead of 7)
# % macro, M1MULT, Multiplier to account for DT scaling. E.g. if *4 encoder decode, set to 0.25
# % macro, M1HOMESETTLE, Time to wait after an autohome before setting zebra pos to readback pos
# % macro, M2, Motor 2 PV
# % macro, M2DIR, Set to - if motor inverted in geobrick (decode control = 3 instead of 7)
# % macro, M2MULT, Multiplier to account for DT scaling. E.g. if *4 encoder decode, set to 0.25
# % macro, M2HOMESETTLE, Time to wait after an autohome before setting zebra pos to readback pos
# % macro, M3, Motor 3 PV
# % macro, M3DIR, Set to - if motor inverted in geobrick (decode control = 3 instead of 7)
# % macro, M3MULT, Multiplier to account for DT scaling. E.g. if *4 encoder decode, set to 0.25
# % macro, M3HOMESETTLE, Time to wait after an autohome before setting zebra pos to readback pos
# % macro, M4, Motor 4 PV
# % macro, M4DIR, Set to - if motor inverted in geobrick (decode control = 3 instead of 7)
# % macro, M4MULT, Multiplier to account for DT scaling. E.g. if *4 encoder decode, set to 0.25
# % macro, M4HOMESETTLE, Time to wait after an autohome before setting zebra pos to readback pos
# % gui, $(PORT), boydetail, zebraApp_opi/zebra.opi, zebra=$(P)$(Q), P=$(P), R=$(Q):
# % gui, $(PORT), edm, zebra.edl, zebra=$(P)$(Q), P=$(P), R=$(Q):
# % gui, $(PORT).DRV, edmtab, zebraDetector.edl, P=$(P), R=$(Q):
# % gui, $(PORT), sevr
# % archiver 10 Monitor
record(bi, "$(P)$(Q):CONNECTED") {
  field(DESC, "Is zebra connected")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0) ISCONNECTED")
  field(ZNAM, "Not Connected")
  field(ONAM, "Connected")
  field(ZSV, "INVALID")
  field(SCAN, "I/O Intr")
}

record(bi, "$(P)$(Q):INITIAL_POLL_DONE") {
  field(DESC, "Initial poll of zebra params?")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0) INITIAL_POLL_DONE")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(ZSV, "MINOR")
  field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(Q):STORE") {
  field(DESC, "Store register values to flash")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0) STORE")
}

record(ao, "$(P)$(Q):RESTORE") {
  field(DESC, "Restore register values from flash")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0) RESTORE")
}

record(ao, "$(P)$(Q):CONFIG_WRITE") {
  field(DESC, "Write reg values to file")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0) CONFIG_WRITE")
}

record(ao, "$(P)$(Q):CONFIG_READ") {
  field(DESC, "Read reg values from file")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0) CONFIG_READ")
}

record(waveform, "$(P)$(Q):CONFIG_FILE") {
  field(DESC, "Filename of config write/read")
  field(PINI, "YES")
  field(DTYP, "asynOctetWrite")
  field(INP, "@asyn($(PORT),0)CONFIG_FILE")
  field(FTVL, "CHAR")
  field(NELM, "256")
}

record(waveform, "$(P)$(Q):CONFIG_STATUS") {
  field(DESC, "Status of config write/read")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn($(PORT),0)CONFIG_STATUS")
  field(FTVL, "CHAR")
  field(NELM, "256")
  field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(Q):SYS_RESET") {
  field(DESC, "Reset Zebra")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0) SYS_RESET")
}

# % archiver 10 Monitor
record(ai, "$(P)$(Q):SYS_VER") {
  field(DESC, "Zebra firmware version")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0) SYS_VER")
  field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(Q):PC_NUM_CAPLO") {
  field(DESC, "Points captured")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0) PC_NUM_CAPLO")
  field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(Q):PC_NUM_CAPHI") {
  field(DESC, "Points captured")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0) PC_NUM_CAPHI")
  field(SCAN, "I/O Intr")
}

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):PC_NUM_CAP") {
  field(INPA, "$(P)$(Q):PC_NUM_CAPLO CP")
  field(INPB, "$(P)$(Q):PC_NUM_CAPHI CP")
  field(CALC, "(A+(B<<16))")
}

record(waveform, "$(P)$(Q):SYS_BUS1") {
  field(DESC, "Zebra system bus key")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn($(PORT),0) SYS_BUS1")
  field(FTVL, "CHAR")
  field(NELM, "1024")
}

record(waveform, "$(P)$(Q):SYS_BUS2") {
  field(DESC, "Zebra system bus key")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn($(PORT),0) SYS_BUS2")
  field(FTVL, "CHAR")
  field(NELM, "1024")
}

# % archiver 1 Monitor
record(ai, "$(P)$(Q):SYS_STAT1LO") {
  field(DESC, "Zebra system bus status 1 Lo")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0) SYS_STAT1LO")
  field(SCAN, "I/O Intr")
}

# % archiver 1 Monitor
record(ai, "$(P)$(Q):SYS_STAT1HI") {
  field(DESC, "Zebra system bus status 1 Hi")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0) SYS_STAT1HI")
  field(SCAN, "I/O Intr")
}

record(calc, "$(P)$(Q):SYS_STAT1") {
  field(DESC, "Zebra system bus status 1")
  field(INPA, "$(P)$(Q):SYS_STAT1LO CP")
  field(INPB, "$(P)$(Q):SYS_STAT1HI CP")
  field(CALC, "A+(B<<16)")
}

# % archiver 1 Monitor
record(ai, "$(P)$(Q):SYS_STAT2LO") {
  field(DESC, "Zebra system bus status 2 Lo")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0) SYS_STAT2LO")
  field(SCAN, "I/O Intr")
}

# % archiver 1 Monitor
record(ai, "$(P)$(Q):SYS_STAT2HI") {
  field(DESC, "Zebra system bus status 2 Hi")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0) SYS_STAT2HI")
  field(SCAN, "I/O Intr")
}

record(calc, "$(P)$(Q):SYS_STAT2") {
  field(DESC, "Zebra system bus status 2")
  field(INPA, "$(P)$(Q):SYS_STAT2LO CP")
  field(INPB, "$(P)$(Q):SYS_STAT2HI CP")
  field(CALC, "A+(B<<16)")
}

substitute "DISP=0, PARAM=AND1_ENA"
include "zebraRegisterWriteBitfield.template"

substitute "DISP=0, PARAM=AND1_INV"
include "zebraRegisterWriteBitfield.template"

substitute "DISP=0, PARAM=AND1_INP1"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=AND1_INP2"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=AND1_INP3"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=AND1_INP4"
include "zebraRegisterWriteMux.template"

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):AND1_OUT") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT2 CP")
  field(CALC, "A>>0&1")
}

substitute "DISP=0, PARAM=AND2_ENA"
include "zebraRegisterWriteBitfield.template"

substitute "DISP=0, PARAM=AND2_INV"
include "zebraRegisterWriteBitfield.template"

substitute "DISP=0, PARAM=AND2_INP1"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=AND2_INP2"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=AND2_INP3"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=AND2_INP4"
include "zebraRegisterWriteMux.template"

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):AND2_OUT") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT2 CP")
  field(CALC, "A>>1&1")
}

substitute "DISP=0, PARAM=AND3_ENA"
include "zebraRegisterWriteBitfield.template"

substitute "DISP=0, PARAM=AND3_INV"
include "zebraRegisterWriteBitfield.template"

substitute "DISP=0, PARAM=AND3_INP1"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=AND3_INP2"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=AND3_INP3"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=AND3_INP4"
include "zebraRegisterWriteMux.template"

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):AND3_OUT") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT2 CP")
  field(CALC, "A>>2&1")
}

substitute "DISP=0, PARAM=AND4_ENA"
include "zebraRegisterWriteBitfield.template"

substitute "DISP=0, PARAM=AND4_INV"
include "zebraRegisterWriteBitfield.template"

substitute "DISP=0, PARAM=AND4_INP1"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=AND4_INP2"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=AND4_INP3"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=AND4_INP4"
include "zebraRegisterWriteMux.template"

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):AND4_OUT") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT2 CP")
  field(CALC, "A>>3&1")
}

substitute "DISP=0, PARAM=OR1_ENA"
include "zebraRegisterWriteBitfield.template"

substitute "DISP=0, PARAM=OR1_INV"
include "zebraRegisterWriteBitfield.template"

substitute "DISP=0, PARAM=OR1_INP1"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OR1_INP2"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OR1_INP3"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OR1_INP4"
include "zebraRegisterWriteMux.template"

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):OR1_OUT") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT2 CP")
  field(CALC, "A>>4&1")
}

substitute "DISP=0, PARAM=OR2_ENA"
include "zebraRegisterWriteBitfield.template"

substitute "DISP=0, PARAM=OR2_INV"
include "zebraRegisterWriteBitfield.template"

substitute "DISP=0, PARAM=OR2_INP1"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OR2_INP2"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OR2_INP3"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OR2_INP4"
include "zebraRegisterWriteMux.template"

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):OR2_OUT") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT2 CP")
  field(CALC, "A>>5&1")
}

substitute "DISP=0, PARAM=OR3_ENA"
include "zebraRegisterWriteBitfield.template"

substitute "DISP=0, PARAM=OR3_INV"
include "zebraRegisterWriteBitfield.template"

substitute "DISP=0, PARAM=OR3_INP1"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OR3_INP2"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OR3_INP3"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OR3_INP4"
include "zebraRegisterWriteMux.template"

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):OR3_OUT") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT2 CP")
  field(CALC, "A>>6&1")
}

substitute "DISP=0, PARAM=OR4_ENA"
include "zebraRegisterWriteBitfield.template"

substitute "DISP=0, PARAM=OR4_INV"
include "zebraRegisterWriteBitfield.template"

substitute "DISP=0, PARAM=OR4_INP1"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OR4_INP2"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OR4_INP3"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OR4_INP4"
include "zebraRegisterWriteMux.template"

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):OR4_OUT") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT2 CP")
  field(CALC, "A>>7&1")
}

substitute "DISP=0, PARAM=GATE1_INP1"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=GATE1_INP2"
include "zebraRegisterWriteMux.template"

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):GATE1_OUT") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT2 CP")
  field(CALC, "A>>8&1")
}

substitute "DISP=0, PARAM=GATE2_INP1"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=GATE2_INP2"
include "zebraRegisterWriteMux.template"

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):GATE2_OUT") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT2 CP")
  field(CALC, "A>>9&1")
}

substitute "DISP=0, PARAM=GATE3_INP1"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=GATE3_INP2"
include "zebraRegisterWriteMux.template"

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):GATE3_OUT") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT2 CP")
  field(CALC, "A>>10&1")
}

substitute "DISP=0, PARAM=GATE4_INP1"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=GATE4_INP2"
include "zebraRegisterWriteMux.template"

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):GATE4_OUT") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT2 CP")
  field(CALC, "A>>11&1")
}

substitute "DISP=0, PARAM=DIV_FIRST"
include "zebraRegisterWriteBitfield.template"

substitute "DISP=0, PARAM=DIV1_INP"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=DIV1_DIV, MOTOR=NOMOTOR, SUB_PREC=0, DRVL=0"
include "zebraRegisterWrite32.template"

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):DIV1_OUTD") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT2 CP")
  field(CALC, "A>>12&1")
}

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):DIV1_OUTN") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT2 CP")
  field(CALC, "A>>16&1")
}

substitute "DISP=0, PARAM=DIV2_INP"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=DIV2_DIV, MOTOR=NOMOTOR, SUB_PREC=0, DRVL=0"
include "zebraRegisterWrite32.template"

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):DIV2_OUTD") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT2 CP")
  field(CALC, "A>>13&1")
}

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):DIV2_OUTN") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT2 CP")
  field(CALC, "A>>17&1")
}

substitute "DISP=0, PARAM=DIV3_INP"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=DIV3_DIV, MOTOR=NOMOTOR, SUB_PREC=0, DRVL=0"
include "zebraRegisterWrite32.template"

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):DIV3_OUTD") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT2 CP")
  field(CALC, "A>>14&1")
}

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):DIV3_OUTN") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT2 CP")
  field(CALC, "A>>18&1")
}

substitute "DISP=0, PARAM=DIV4_INP"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=DIV4_DIV, MOTOR=NOMOTOR, SUB_PREC=0, DRVL=0"
include "zebraRegisterWrite32.template"

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):DIV4_OUTD") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT2 CP")
  field(CALC, "A>>15&1")
}

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):DIV4_OUTN") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT2 CP")
  field(CALC, "A>>19&1")
}

substitute "DISP=0, PARAM=PULSE1_DLY, ASLO=0.0001, SUB_PREC=4"
include "zebraRegisterWrite.template"

substitute "DISP=0, PARAM=PULSE1_WID, ASLO=0.0001, SUB_PREC=4"
include "zebraRegisterWrite.template"

substitute "DISP=0, PARAM=PULSE1_PRE"
include "zebraRegisterWritePrescaler.template"

substitute "DISP=0, PARAM=PULSE1_INP"
include "zebraRegisterWriteMux.template"

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):PULSE1_OUT") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT2 CP")
  field(CALC, "A>>20&1")
}

substitute "DISP=0, PARAM=PULSE2_DLY, ASLO=0.0001, SUB_PREC=4"
include "zebraRegisterWrite.template"

substitute "DISP=0, PARAM=PULSE2_WID, ASLO=0.0001, SUB_PREC=4"
include "zebraRegisterWrite.template"

substitute "DISP=0, PARAM=PULSE2_PRE"
include "zebraRegisterWritePrescaler.template"

substitute "DISP=0, PARAM=PULSE2_INP"
include "zebraRegisterWriteMux.template"

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):PULSE2_OUT") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT2 CP")
  field(CALC, "A>>21&1")
}

substitute "DISP=0, PARAM=PULSE3_DLY, ASLO=0.0001, SUB_PREC=4"
include "zebraRegisterWrite.template"

substitute "DISP=0, PARAM=PULSE3_WID, ASLO=0.0001, SUB_PREC=4"
include "zebraRegisterWrite.template"

substitute "DISP=0, PARAM=PULSE3_PRE"
include "zebraRegisterWritePrescaler.template"

substitute "DISP=0, PARAM=PULSE3_INP"
include "zebraRegisterWriteMux.template"

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):PULSE3_OUT") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT2 CP")
  field(CALC, "A>>22&1")
}

substitute "DISP=0, PARAM=PULSE4_DLY, ASLO=0.0001, SUB_PREC=4"
include "zebraRegisterWrite.template"

substitute "DISP=0, PARAM=PULSE4_WID, ASLO=0.0001, SUB_PREC=4"
include "zebraRegisterWrite.template"

substitute "DISP=0, PARAM=PULSE4_PRE"
include "zebraRegisterWritePrescaler.template"

substitute "DISP=0, PARAM=PULSE4_INP"
include "zebraRegisterWriteMux.template"

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):PULSE4_OUT") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT2 CP")
  field(CALC, "A>>23&1")
}

substitute "DISP=0, PARAM=OUT1_TTL"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OUT1_NIM"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OUT1_LVDS"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OUT2_TTL"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OUT2_NIM"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OUT2_LVDS"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OUT3_TTL"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OUT3_OC"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OUT3_LVDS"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OUT4_TTL"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OUT4_NIM"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OUT4_PECL"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OUT5_ENCA"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OUT5_ENCB"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OUT5_ENCZ"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OUT6_ENCA"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OUT6_ENCB"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OUT6_ENCZ"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OUT7_ENCA"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OUT7_ENCB"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OUT7_ENCZ"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OUT8_ENCA"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OUT8_ENCB"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OUT8_ENCZ"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=SOFT_IN"
include "zebraRegisterWriteBitfield.template"

record(motor, "$(P)$(Q):NOMOTOR") {
  field(DTYP, "Soft Channel")
  field(ERES, "1")
  field(OFF, "0")
  field(DESC, "N/A")
}

record(ai, "$(P)$(Q):NOMOTOR:ERES") {
  field(VAL, "1")
}

record(ai, "$(P)$(Q):NOMOTOR:SCALE") {
  field(VAL, "1")
}

record(calcout, "$(P)$(Q):M1:ERES") {
  field(CALC, "(B=0?A:-A)*(C>0?C:1)*D")
  field(INPA, "$(M1=$(P)$(Q):NOMOTOR).ERES CP")
  field(INPB, "$(M1=$(P)$(Q):NOMOTOR).DIR CP")
  field(INPC, "$(M1=$(P)$(Q):NOMOTOR):SCALE CP")
  field(INPD, "$(M1DIR=+)$(M1MULT=1)")
  field(PREC, "4")
}

record(calcout, "$(P)$(Q):M2:ERES") {
  field(CALC, "(B=0?A:-A)*(C>0?C:1)*D")
  field(INPA, "$(M2=$(P)$(Q):NOMOTOR).ERES CP")
  field(INPB, "$(M2=$(P)$(Q):NOMOTOR).DIR CP")
  field(INPC, "$(M2=$(P)$(Q):NOMOTOR):SCALE CP")
  field(INPD, "$(M2DIR=+)$(M2MULT=1)")
  field(PREC, "4")
}

record(calcout, "$(P)$(Q):M3:ERES") {
  field(CALC, "(B=0?A:-A)*(C>0?C:1)*D")
  field(INPA, "$(M3=$(P)$(Q):NOMOTOR).ERES CP")
  field(INPB, "$(M3=$(P)$(Q):NOMOTOR).DIR CP")
  field(INPC, "$(M3=$(P)$(Q):NOMOTOR):SCALE CP")
  field(INPD, "$(M3DIR=+)$(M3MULT=1)")
  field(PREC, "4")
}

record(calcout, "$(P)$(Q):M4:ERES") {
  field(CALC, "(B=0?A:-A)*(C>0?C:1)*D")
  field(INPA, "$(M4=$(P)$(Q):NOMOTOR).ERES CP")
  field(INPB, "$(M4=$(P)$(Q):NOMOTOR).DIR CP")
  field(INPC, "$(M4=$(P)$(Q):NOMOTOR):SCALE CP")
  field(INPD, "$(M4DIR=+)$(M4MULT=1)")
  field(PREC, "4")
}

record(ao, "$(P)$(Q):M1:ERES:OUT") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0) M1_SCALE")
  field(DOL, "$(P)$(Q):M1:ERES CP")
  field(OMSL, "closed_loop")
}

record(ao, "$(P)$(Q):M2:ERES:OUT") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0) M2_SCALE")
  field(DOL, "$(P)$(Q):M2:ERES CP")
  field(OMSL, "closed_loop")
}

record(ao, "$(P)$(Q):M3:ERES:OUT") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0) M3_SCALE")
  field(DOL, "$(P)$(Q):M3:ERES CP")
  field(OMSL, "closed_loop")
}

record(ao, "$(P)$(Q):M4:ERES:OUT") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0) M4_SCALE")
  field(DOL, "$(P)$(Q):M4:ERES CP")
  field(OMSL, "closed_loop")
}

record(ao, "$(P)$(Q):NOMOTOR:OFF") {
  field(VAL, "0")
}

record(calcout, "$(P)$(Q):M1:OFF") {
  field(CALC, "A")
  field(INPA, "$(M1=$(P)$(Q):NOMOTOR).OFF CP")
  field(PREC, "4")
}

record(calcout, "$(P)$(Q):M2:OFF") {
  field(CALC, "A")
  field(INPA, "$(M2=$(P)$(Q):NOMOTOR).OFF CP")
  field(PREC, "4")
}

record(calcout, "$(P)$(Q):M3:OFF") {
  field(CALC, "A")
  field(INPA, "$(M3=$(P)$(Q):NOMOTOR).OFF CP")
  field(PREC, "4")
}

record(calcout, "$(P)$(Q):M4:OFF") {
  field(CALC, "A")
  field(INPA, "$(M4=$(P)$(Q):NOMOTOR).OFF CP")
  field(PREC, "4")
}

record(ao, "$(P)$(Q):M1:OFF:OUT") {
  field(DOL, "$(P)$(Q):M1:OFF CP")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0) M1_OFF")
  field(OMSL, "closed_loop")
}

record(ao, "$(P)$(Q):M2:OFF:OUT") {
  field(DOL, "$(P)$(Q):M2:OFF CP")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0) M2_OFF")
  field(OMSL, "closed_loop")
}

record(ao, "$(P)$(Q):M3:OFF:OUT") {
  field(DOL, "$(P)$(Q):M3:OFF CP")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0) M3_OFF")
  field(OMSL, "closed_loop")
}

record(ao, "$(P)$(Q):M4:OFF:OUT") {
  field(DOL, "$(P)$(Q):M4:OFF CP")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0) M4_OFF")
  field(OMSL, "closed_loop")
}

record(sel, "$(P)$(Q):MOTOR:ERES") {
  field(SELM, "Specified")
  field(INPA, "$(P)$(Q):M1:ERES CP")
  field(INPB, "$(P)$(Q):M2:ERES CP")
  field(INPC, "$(P)$(Q):M3:ERES CP")
  field(INPD, "$(P)$(Q):M4:ERES CP")
  field(INPE, "$(P)$(Q):MAV:ERES.VAL CP")
  field(NVL, "$(P)$(Q):PC_ENC:RBV CP")
}

record(sel, "$(P)$(Q):MOTOR:OFF") {
  field(SELM, "Specified")
  field(INPA, "$(P)$(Q):M1:OFF CP")
  field(INPB, "$(P)$(Q):M2:OFF CP")
  field(INPC, "$(P)$(Q):M3:OFF CP")
  field(INPD, "$(P)$(Q):M4:OFF CP")
  field(INPE, "$(P)$(Q):MAV:OFF.VAL CP")
  field(NVL, "$(P)$(Q):PC_ENC:RBV CP")
}

record(sel, "$(P)$(Q):PULSE:ERES") {
  field(SELM, "Specified")
  field(INPA, "$(P)$(Q):MOTOR:ABSERES CP")
  field(INPB, "$(P)$(Q):TIME:ERES CP")
  field(INPC, "1")
  field(NVL, "$(P)$(Q):PC_PULSE_SEL CP")
}

substitute "DISP=$(P)$(Q):ARRAY_ACQ CP, PARAM=POS1_SET, MOTOR=M1, SUB_PREC=$(PREC=4), DRVL=-A*2**31+B"
include "zebraRegisterWrite32.template"

substitute "DISP=$(P)$(Q):ARRAY_ACQ CP, PARAM=POS2_SET, MOTOR=M2, SUB_PREC=$(PREC=4), DRVL=-A*2**31+B"
include "zebraRegisterWrite32.template"

substitute "DISP=$(P)$(Q):ARRAY_ACQ CP, PARAM=POS3_SET, MOTOR=M3, SUB_PREC=$(PREC=4), DRVL=-A*2**31+B"
include "zebraRegisterWrite32.template"

substitute "DISP=$(P)$(Q):ARRAY_ACQ CP, PARAM=POS4_SET, MOTOR=M4, SUB_PREC=$(PREC=4), DRVL=-A*2**31+B"
include "zebraRegisterWrite32.template"

substitute "DISP=$(P)$(Q):ARRAY_ACQ CP, PARAM=PC_TSPRE"
include "zebraRegisterWritePrescaler.template"

record(calcout, "$(P)$(Q):PC_ARM:DISP") {
  field(DESC, "Disable caputs")
  field(CALC, "A")
  field(INPA, "$(P)$(Q):ARRAY_ACQ CP")
  field(OUT, "$(P)$(Q):PC_ARM.DISP")
}

record(ao, "$(P)$(Q):PC_ARM") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0) PC_ARM")
  field(FLNK, "$(P)$(Q):ARM_SET_BUSY")
}

record(dfanout, "$(P)$(Q):ARM_SET_BUSY") {
  field(OUTA, "$(P)$(Q):ARM_BUSY PP")
  field(OUTB, "$(P)$(Q):Acquire PP")
  field(VAL, "1")
}

# % archiver 10 Monitor
record(busy, "$(P)$(Q):ARM_BUSY") {
}

record(ao, "$(P)$(Q):PC_DISARM") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0) PC_DISARM")
}

substitute "DISP=$(P)$(Q):ARRAY_ACQ CP, PARAM=PC_GATE_INP"
include "zebraRegisterWriteMux.template"

substitute "DISP=$(P)$(Q):ARRAY_ACQ CP, PARAM=PC_GATE_SEL, ZRST=Position, ONST=Time, TWST=External, THST=$(EMPTY=), FRST=$(EMPTY=)"
include "zebraRegisterWritePosCompInp.template"

record(ao, "$(P)$(Q):PC_GATE_SEL:SET") {
  field(FLNK, "$(P)$(Q):PC_GATE_SEL:DFANOUT")
}

record(dfanout, "$(P)$(Q):PC_GATE_SEL:DFANOUT") {
  field(DOL, "$(P)$(Q):PC_GATE_SEL")
  field(OUTA, "$(P)$(Q):GATE:ERES.SELN PP")
  field(OUTB, "$(P)$(Q):STARTGATE:ERES.SELN PP")
  field(OUTC, "$(P)$(Q):STARTGATE:OFF.SELN PP")
}

substitute "DISP=$(P)$(Q):ARRAY_ACQ CP, PARAM=PC_GATE_START, MOTOR=STARTGATE, SUB_PREC=$(PREC=4), DRVL=-A*2**31+B"
include "zebraRegisterWrite32.template"

substitute "DISP=$(P)$(Q):ARRAY_ACQ CP, PARAM=PC_GATE_WID, MOTOR=GATE, SUB_PREC=$(PREC=4), DRVL=0"
include "zebraRegisterWrite32.template"

substitute "DISP=$(P)$(Q):ARRAY_ACQ CP, PARAM=PC_GATE_NGATE, MOTOR=NOMOTOR, SUB_PREC=0, DRVL=0"
include "zebraRegisterWrite32.template"

substitute "DISP=$(P)$(Q):ARRAY_ACQ CP, PARAM=PC_GATE_STEP, MOTOR=GATE, SUB_PREC=$(PREC=4), DRVL=0"
include "zebraRegisterWrite32.template"

substitute "DISP=$(P)$(Q):ARRAY_ACQ CP, PARAM=PC_PULSE_INP"
include "zebraRegisterWriteMux.template"

substitute "ZRST=Position, ONST=Time, TWST=External, THST=$(EMPTY=), FRST=$(EMPTY=), DISP=$(P)$(Q):ARRAY_ACQ CP, PARAM=PC_PULSE_SEL"
include "zebraRegisterWritePosCompInp.template"


record(ao, "$(P)$(Q):PC_PULSE_SEL:SET") {
  field(FLNK, "$(P)$(Q):PC_PULSE_SEL:DFANOUT")
}

record(dfanout, "$(P)$(Q):PC_PULSE_SEL:DFANOUT") {
  field(DOL, "$(P)$(Q):PC_PULSE_SEL")
  field(OUTA, "$(P)$(Q):PULSE:ERES.SELN PP")
  field(OUTB, "$(P)$(Q):PC_PULSE_STEP:DRVL.A PP")
  field(OUTC, "$(P)$(Q):PC_PULSE:VALID.D PP")
}

substitute "DISP=$(P)$(Q):ARRAY_ACQ CP, PARAM=PC_PULSE_START, MOTOR=PULSE, SUB_PREC=$(PREC=4), DRVL=0"
include "zebraRegisterWrite32.template"

substitute "DISP=$(P)$(Q):ARRAY_ACQ CP, PARAM=PC_PULSE_DLY, MOTOR=TIME, SUB_PREC=$(PREC=4), DRVL=0"
include "zebraRegisterWrite32.template"

substitute "DISP=$(P)$(Q):ARRAY_ACQ CP, PARAM=PC_PULSE_WID, MOTOR=PULSE, SUB_PREC=$(PREC=4), DRVL=0"
include "zebraRegisterWrite32.template"

substitute "DISP=$(P)$(Q):ARRAY_ACQ CP, PARAM=PC_PULSE_STEP, MOTOR=PULSE, SUB_PREC=$(PREC=4), DRVL=0"
include "zebraRegisterWrite32.template"

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):PC_ARM_OUT") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT1 CP")
  field(CALC, "A>>29&1")
}

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):PC_GATE_OUT") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT1 CP")
  field(CALC, "A>>30&1")
}

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):PC_PULSE_OUT") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT1 CP")
  field(CALC, "A>>31&1")
}

record(ai, "$(P)$(Q):M1:RBV") {
  field(INP, "$(M1=$(P)$(Q):NOMOTOR).RBV CP")
  field(PREC, "4")
}

record(ai, "$(P)$(Q):M2:RBV") {
  field(INP, "$(M2=$(P)$(Q):NOMOTOR).RBV CP")
  field(PREC, "4")
}

record(ai, "$(P)$(Q):M3:RBV") {
  field(INP, "$(M3=$(P)$(Q):NOMOTOR).RBV CP")
  field(PREC, "4")
}

record(ai, "$(P)$(Q):M4:RBV") {
  field(INP, "$(M4=$(P)$(Q):NOMOTOR).RBV CP")
  field(PREC, "4")
}

record(ai, "$(P)$(Q):NOMOTOR:RBV") {
  field(VAL, "0")
  field(PREC, "4")
}

record(calc, "$(P)$(Q):NOMOTOR:SDIS") {
  field(A, "0")
  field(PINI, "YES")
}

record(calcout, "$(P)$(Q):M1:SDIS:TRANS") {
  field(DESC, "Trigger seq when SDIS trans to Zero")
  field(CALC, "A")
  field(INPA, "$(M1=$(P)$(Q):NOMOTOR):SDIS.A CP")
  field(OOPT, "Transition To Zero")
  field(OUT, "$(P)$(Q):M1:ONENABLE.PROC")
}

record(seq, "$(P)$(Q):M1:ONENABLE") {
  field(DESC, "1s after motor enabled, call setpos")
  field(DOL1, "1")
  field(LNK1, "$(P)$(Q):M1:SETPOS.PROC PP")
  field(DLY1, "$(M1HOMESETTLE=5)")
}

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):M1:SETPOS") {
  field(CALC, "A")
  field(INPA, "$(P)$(Q):M1:RBV")
  field(OUT, "$(P)$(Q):POS1_SET PP")
}

record(calcout, "$(P)$(Q):M2:SDIS:TRANS") {
  field(DESC, "Trigger seq when SDIS trans to Zero")
  field(CALC, "A")
  field(INPA, "$(M2=$(P)$(Q):NOMOTOR):SDIS.A CP")
  field(OOPT, "Transition To Zero")
  field(OUT, "$(P)$(Q):M2:ONENABLE.PROC")
}

record(seq, "$(P)$(Q):M2:ONENABLE") {
  field(DESC, "1s after motor enabled, call setpos")
  field(DOL1, "1")
  field(LNK1, "$(P)$(Q):M2:SETPOS.PROC PP")
  field(DLY1, "$(M2HOMESETTLE=5)")
}

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):M2:SETPOS") {
  field(CALC, "A")
  field(INPA, "$(P)$(Q):M2:RBV")
  field(OUT, "$(P)$(Q):POS2_SET PP")
}

record(calcout, "$(P)$(Q):M3:SDIS:TRANS") {
  field(DESC, "Trigger seq when SDIS trans to Zero")
  field(CALC, "A")
  field(INPA, "$(M3=$(P)$(Q):NOMOTOR):SDIS.A CP")
  field(OOPT, "Transition To Zero")
  field(OUT, "$(P)$(Q):M3:ONENABLE.PROC")
}

record(seq, "$(P)$(Q):M3:ONENABLE") {
  field(DESC, "1s after motor enabled, call setpos")
  field(DOL1, "1")
  field(LNK1, "$(P)$(Q):M3:SETPOS.PROC PP")
  field(DLY1, "$(M3HOMESETTLE=5)")
}

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):M3:SETPOS") {
  field(CALC, "A")
  field(INPA, "$(P)$(Q):M3:RBV")
  field(OUT, "$(P)$(Q):POS3_SET PP")
}

record(calcout, "$(P)$(Q):M4:SDIS:TRANS") {
  field(DESC, "Trigger seq when SDIS trans to Zero")
  field(CALC, "A")
  field(INPA, "$(M4=$(P)$(Q):NOMOTOR):SDIS.A CP")
  field(OOPT, "Transition To Zero")
  field(OUT, "$(P)$(Q):M4:ONENABLE.PROC")
}

record(seq, "$(P)$(Q):M4:ONENABLE") {
  field(DESC, "1s after motor enabled, call setpos")
  field(DOL1, "1")
  field(LNK1, "$(P)$(Q):M4:SETPOS.PROC PP")
  field(DLY1, "$(M4HOMESETTLE=5)")
}

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):M4:SETPOS") {
  field(CALC, "A")
  field(INPA, "$(P)$(Q):M4:RBV")
  field(OUT, "$(P)$(Q):POS4_SET PP")
}

substitute "DISP=$(P)$(Q):ARRAY_ACQ CP, PARAM=PC_ARM_INP"
include "zebraRegisterWriteMux.template"

record(stringin, "$(P)$(Q):M1:EGU") {
  field(INP, "$(M1=$(P)$(Q):NOMOTOR).EGU CP")
}

record(stringin, "$(P)$(Q):M2:EGU") {
  field(INP, "$(M2=$(P)$(Q):NOMOTOR).EGU CP")
}

record(stringin, "$(P)$(Q):M3:EGU") {
  field(INP, "$(M3=$(P)$(Q):NOMOTOR).EGU CP")
}

record(stringin, "$(P)$(Q):M4:EGU") {
  field(INP, "$(M4=$(P)$(Q):NOMOTOR).EGU CP")
}

record(stringin, "$(P)$(Q):NOMOTOR:EGU") {
  field(VAL, "cts")
}

substitute "DISP=$(P)$(Q):ARRAY_ACQ CP, PARAM=POLARITY"
include "zebraRegisterWriteBitfield.template"

record(ai, "$(P)$(Q):SYS_STATERR:RBVA") {
  field(DESC, "Zebra error status ai")
  field(DTYP, "asynInt32")
  field(FLNK, "$(P)$(Q):SYS_STATERR")
  field(INP, "@asyn($(PORT),0) SYS_STATERR")
  field(SCAN, "I/O Intr")
}

# % archiver 10 Monitor
record(mbbiDirect, "$(P)$(Q):SYS_STATERR") {
  field(DESC, "Zebra error status")
  field(INP, "$(P)$(Q):SYS_STATERR:RBVA")
}

substitute "DISP=$(P)$(Q):ARRAY_ACQ CP, PARAM=PC_ARM_SEL, ZRST=Soft, ONST=External, THST=$(EMPTY=), FRST=$(EMPTY=), TWST=$(EMPTY=)"
include "zebraRegisterWritePosCompInp.template"

record(ai, "$(P)$(Q):PULSE:OFF") {
  field(VAL, "0")
}

record(sel, "$(P)$(Q):STARTGATE:ERES") {
  field(SELM, "Specified")
  field(INPA, "$(P)$(Q):MOTOR:ERES CP")
  field(INPB, "$(P)$(Q):TIME:ERES CP")
  field(INPC, "1")
  field(NVL, "$(P)$(Q):PC_GATE_SEL CP")
  field(INPD, "$(P)$(Q):MOTOR:ERES CP")
}

record(sel, "$(P)$(Q):STARTGATE:OFF") {
  field(SELM, "Specified")
  field(INPA, "$(P)$(Q):MOTOR:OFF CP")
  field(INPB, "0")
  field(INPC, "0")
  field(NVL, "$(P)$(Q):PC_GATE_SEL CP")
  field(INPD, "$(P)$(Q):MOTOR:OFF CP")
}

record(ai, "$(P)$(Q):GATE:OFF") {
  field(VAL, "0")
}

record(calc, "$(P)$(Q):MOTOR:ABSERES") {
  field(CALC, "ABS(A)")
  field(INPA, "$(P)$(Q):MOTOR:ERES CP")
}

record(sel, "$(P)$(Q):GATE:ERES") {
  field(SELM, "Specified")
  field(INPA, "$(P)$(Q):MOTOR:ABSERES CP")
  field(INPB, "$(P)$(Q):TIME:ERES CP")
  field(INPC, "1")
  field(NVL, "$(P)$(Q):PC_GATE_SEL CP")
  field(INPD, "$(P)$(Q):MOTOR:ABSERES CP")
}

substitute "DISP=$(P)$(Q):ARRAY_ACQ CP, PARAM=PC_ENC, ZRST=Enc1, ONST=Enc2, TWST=Enc3, THST=Enc4, FRST=Enc1-4Av"
include "zebraRegisterWritePosCompInp.template"

record(waveform, "$(P)$(Q):PC_TIME") {
  field(DTYP, "asynFloat64ArrayIn")
  field(INP, "@asyn($(PORT),0)PC_TIME")
  field(NELM, "$(NELM=100000)")
  field(FTVL, "DOUBLE")
  field(SCAN, "I/O Intr")
}

record(waveform, "$(P)$(Q):PC_SYS1") {
  field(DTYP, "asynFloat64ArrayIn")
  field(INP, "@asyn($(PORT),0)PC_CAP5")
  field(NELM, "$(NELM=100000)")
  field(FTVL, "DOUBLE")
  field(SCAN, "I/O Intr")
}

record(waveform, "$(P)$(Q):PC_SYS2") {
  field(DTYP, "asynFloat64ArrayIn")
  field(INP, "@asyn($(PORT),0)PC_CAP6")
  field(NELM, "$(NELM=100000)")
  field(FTVL, "DOUBLE")
  field(SCAN, "I/O Intr")
}

record(waveform, "$(P)$(Q):PC_DIV1") {
  field(DTYP, "asynFloat64ArrayIn")
  field(INP, "@asyn($(PORT),0)PC_CAP7")
  field(NELM, "$(NELM=100000)")
  field(FTVL, "DOUBLE")
  field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(Q):PC_DIV1_LAST") {
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0) PC_CAP7_LAST")
  field(SCAN, "I/O Intr")
  field(MDEL, "-1")
}

record(waveform, "$(P)$(Q):PC_DIV2") {
  field(DTYP, "asynFloat64ArrayIn")
  field(INP, "@asyn($(PORT),0)PC_CAP8")
  field(NELM, "$(NELM=100000)")
  field(FTVL, "DOUBLE")
  field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(Q):PC_DIV2_LAST") {
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0) PC_CAP8_LAST")
  field(SCAN, "I/O Intr")
  field(MDEL, "-1")
}

record(waveform, "$(P)$(Q):PC_DIV3") {
  field(DTYP, "asynFloat64ArrayIn")
  field(INP, "@asyn($(PORT),0)PC_CAP9")
  field(NELM, "$(NELM=100000)")
  field(FTVL, "DOUBLE")
  field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(Q):PC_DIV3_LAST") {
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0) PC_CAP9_LAST")
  field(SCAN, "I/O Intr")
  field(MDEL, "-1")
}

record(waveform, "$(P)$(Q):PC_DIV4") {
  field(DTYP, "asynFloat64ArrayIn")
  field(INP, "@asyn($(PORT),0)PC_CAP10")
  field(NELM, "$(NELM=100000)")
  field(FTVL, "DOUBLE")
  field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(Q):PC_DIV4_LAST") {
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0) PC_CAP10_LAST")
  field(SCAN, "I/O Intr")
  field(MDEL, "-1")
}

record(waveform, "$(P)$(Q):PC_FILT1") {
  field(DTYP, "asynInt8ArrayIn")
  field(INP, "@asyn($(PORT),0)PC_FILT1")
  field(NELM, "$(NELM=100000)")
  field(FTVL, "CHAR")
  field(SCAN, "I/O Intr")
}

substitute "DISP=0, PARAM=PC_FILTSEL1"
include "zebraRegisterWriteMux.template"

record(waveform, "$(P)$(Q):PC_FILT2") {
  field(DTYP, "asynInt8ArrayIn")
  field(INP, "@asyn($(PORT),0)PC_FILT2")
  field(NELM, "$(NELM=100000)")
  field(FTVL, "CHAR")
  field(SCAN, "I/O Intr")
}

substitute "DISP=0, PARAM=PC_FILTSEL2"
include "zebraRegisterWriteMux.template"

record(waveform, "$(P)$(Q):PC_FILT3") {
  field(DTYP, "asynInt8ArrayIn")
  field(INP, "@asyn($(PORT),0)PC_FILT3")
  field(NELM, "$(NELM=100000)")
  field(FTVL, "CHAR")
  field(SCAN, "I/O Intr")
}

substitute "DISP=0, PARAM=PC_FILTSEL3"
include "zebraRegisterWriteMux.template"

record(waveform, "$(P)$(Q):PC_FILT4") {
  field(DTYP, "asynInt8ArrayIn")
  field(INP, "@asyn($(PORT),0)PC_FILT4")
  field(NELM, "$(NELM=100000)")
  field(FTVL, "CHAR")
  field(SCAN, "I/O Intr")
}

substitute "DISP=0, PARAM=PC_FILTSEL4"
include "zebraRegisterWriteMux.template"

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):QUAD_OUTA") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT2 CP")
  field(CALC, "A>>24&1")
}

substitute "DISP=0, PARAM=QUAD_STEP"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=QUAD_DIR"
include "zebraRegisterWriteMux.template"

# % archiver 10 Monitor
record(calcout, "$(P)$(Q):QUAD_OUTB") {
  field(DESC, "Current output status")
  field(INPA, "$(P)$(Q):SYS_STAT2 CP")
  field(CALC, "A>>25&1")
}

substitute "DISP=0, PARAM=OUT5_CONN"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OUT6_CONN"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OUT7_CONN"
include "zebraRegisterWriteMux.template"

substitute "DISP=0, PARAM=OUT8_CONN"
include "zebraRegisterWriteMux.template"

substitute "DISP=$(P)$(Q):ARRAY_ACQ CP, PARAM=PC_BIT_CAP"
include "zebraRegisterWriteBitfield.template"

record(ao, "$(P)$(Q):ARRAY_UPDATE") {
  field(DESC, "Update array values if new ones exist")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0) ARRAY_UPDATE")
  field(SCAN, "1 second")
}

record(ai, "$(P)$(Q):PC_ENC1_LAST") {
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0) PC_CAP1_LAST")
  field(SCAN, "I/O Intr")
  field(PREC, "4")
}

record(ai, "$(P)$(Q):PC_ENC2_LAST") {
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0) PC_CAP2_LAST")
  field(SCAN, "I/O Intr")
  field(PREC, "4")
}

record(ai, "$(P)$(Q):PC_ENC3_LAST") {
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0) PC_CAP3_LAST")
  field(SCAN, "I/O Intr")
  field(PREC, "4")
}

record(ai, "$(P)$(Q):PC_ENC4_LAST") {
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0) PC_CAP4_LAST")
  field(SCAN, "I/O Intr")
  field(PREC, "4")
}

record(waveform, "$(P)$(Q):PC_ENC1") {
  field(DTYP, "asynFloat64ArrayIn")
  field(INP, "@asyn($(PORT),0)PC_CAP1")
  field(NELM, "$(NELM=100000)")
  field(FTVL, "DOUBLE")
  field(SCAN, "I/O Intr")
}

record(waveform, "$(P)$(Q):PC_ENC2") {
  field(DTYP, "asynFloat64ArrayIn")
  field(INP, "@asyn($(PORT),0)PC_CAP2")
  field(NELM, "$(NELM=100000)")
  field(FTVL, "DOUBLE")
  field(SCAN, "I/O Intr")
}

record(waveform, "$(P)$(Q):PC_ENC3") {
  field(DTYP, "asynFloat64ArrayIn")
  field(INP, "@asyn($(PORT),0)PC_CAP3")
  field(NELM, "$(NELM=100000)")
  field(FTVL, "DOUBLE")
  field(SCAN, "I/O Intr")
}

# This one updates last, so forward link to PC_NUM_DOWN
record(waveform, "$(P)$(Q):PC_ENC4") {
  field(DTYP, "asynFloat64ArrayIn")
  field(INP, "@asyn($(PORT),0)PC_CAP4")
  field(NELM, "$(NELM=100000)")
  field(FTVL, "DOUBLE")
  field(SCAN, "I/O Intr")
  field(FLNK, "$(P)$(Q):PC_NUM_DOWN")
}

# % archiver 10 Monitor
# Note Passive scan, will be triggered from PC_ENC4
record(ai, "$(P)$(Q):PC_NUM_DOWN") {
  field(DESC, "Points downloaded")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0) PC_NUM_DOWN")
  field(FLNK, "$(P)$(Q):ARRAY_ACQ")
}

# % archiver 10 Monitor
# % gui, $(PORT), status
# Note Passive scan, will be triggered from NUM_DOWN
record(ai, "$(P)$(Q):ARRAY_ACQ") {
  field(DESC, "Zebra acquiring arrays")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0) ACQUIRE")
  field(FLNK, "$(P)$(Q):ARM_BUSY_DONE")
}

record(ao, "$(P)$(Q):ARM_BUSY_DONE") {
  field(VAL, "0")
  field(OUT, "$(P)$(Q):ARM_BUSY CA")
}

substitute "DISP=$(P)$(Q):ARRAY_ACQ CP, PARAM=PC_PULSE_MAX, MOTOR=NOMOTOR, SUB_PREC=0, DRVL=0"
include "zebraRegisterWrite32.template"

record(ai, "$(P)$(Q):PC_DIR:RRBV") {
  field(DESC, "Raw Readback param value")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0) PC_DIR")
  field(FLNK, "$(P)$(Q):PC_DIR:CRBV")
  field(SCAN, "I/O Intr")
}

record(calcout, "$(P)$(Q):PC_DIR:CRBV") {
  field(DESC, "Swap +ve and negative directions")
  field(CALC, "B<0?(A=0?1:A=1?0:A):A")
  field(INPA, "$(P)$(Q):PC_DIR:RRBV")
  field(INPB, "$(P)$(Q):MOTOR:ERES CP")
  field(OUT, "$(P)$(Q):PC_DIR:RBV.RVAL PP")
}

record(mbbi, "$(P)$(Q):PC_DIR:RBV") {
  field(DESC, "Readback param value")
  field(DTYP, "Raw Soft Channel")
  field(FLNK, "$(P)$(Q):PC_DIR:SYNC")
  field(ZRST, "Positive")
  field(ZRVL, "0")
  field(ONST, "Negative")
  field(ONVL, "1")
}

record(calcout, "$(P)$(Q):PC_DIR:SYNC") {
  field(DESC, "Sync demand with readback")
  field(CALC, "A")
  field(OUT, "$(P)$(Q):PC_DIR PP")
  field(INPA, "$(P)$(Q):PC_DIR:RBV")
}

record(calcout, "$(P)$(Q):PC_DIR:DISP") {
  field(DESC, "Disable caputs")
  field(CALC, "A")
  field(INPA, "$(P)$(Q):ARRAY_ACQ CP")
  field(OUT, "$(P)$(Q):PC_DIR.DISP")
}

# % archiver 10 Monitor
record(mbbo, "$(P)$(Q):PC_DIR") {
  field(DESC, "Demand value for param")
  field(DTYP, "Raw Soft Channel")
  field(OUT, "$(P)$(Q):PC_DIR:CSET.A PP")
  field(ZRST, "Positive")
  field(ZRVL, "0")
  field(ONST, "Negative")
  field(ONVL, "1")
}

record(calcout, "$(P)$(Q):PC_DIR:CSET") {
  field(DESC, "Swap +ve and negative directions")
  field(CALC, "B<0?(A=0?1:A=1?0:A):A")
  field(INPB, "$(P)$(Q):MOTOR:ERES")
  field(OUT, "$(P)$(Q):PC_DIR:SET PP")
}

record(ao, "$(P)$(Q):PC_DIR:SET") {
  field(DESC, "Write param value to zebra")
  field(DTYP, "asynInt32")
  field(SDIS, "$(P)$(Q):PC_DIR:SYNC.PACT")
  field(OUT, "@asyn($(PORT),0) PC_DIR")
}

record(ai, "$(P)$(Q):TIME:ERES") {
  field(VAL, "0.0001")
}

record(ai, "$(P)$(Q):TIME:OFF") {
  field(VAL, "0")
}

# Used for GDA
# % archiver 10 Monitor
record(busy, "$(P)$(Q):WRITE_BUSY") {
}

# Used for GDA
# % archiver 10 Monitor
record(ai, "$(P)$(Q):SCAN_TYPE") {
}

record(calcout, "$(P)$(Q):PC_PULSE_STEP:DRVL") {
  field(CALC, "A=1?B=0?C>2**6?F:G:H:I")
  field(INPA, "$(P)$(Q):PC_PULSE_SEL CP")
  field(INPB, "$(P)$(Q):PC_TSPRE:RBV CP")
  field(INPC, "$(P)$(Q):PC_BIT_CAP CP")
  field(INPF, "0.0016")
  field(INPG, "0.0012")
  field(INPH, "0.0003")
  field(INPI, "$(P)$(Q):PULSE:ERES CP")
  field(OUT, "$(P)$(Q):PC_PULSE_STEP.DRVL")
}

record(calcout, "$(P)$(Q):PC_PULSE:VALID") {
  field(CALC, "D#1|(A>MAX(B,C)+0.0001)")
  field(INPA, "$(P)$(Q):PC_PULSE_STEP CP")
  field(INPB, "$(P)$(Q):PC_PULSE_WID CP")
  field(INPC, "$(P)$(Q):PC_PULSE_DLY CP")
  field(INPD, "$(P)$(Q):PC_PULSE_SEL CP")
}

record(calcout, "$(P)$(Q):MAV:OFF") {
  field(CALC, "(A+B+C+D)/4")
  field(INPA, "$(P)$(Q):M1:OFF CP")
  field(PREC, "4")
  field(INPB, "$(P)$(Q):M2:OFF CP")
  field(INPC, "$(P)$(Q):M3:OFF CP")
  field(INPD, "$(P)$(Q):M4:OFF CP")
}

record(calcout, "$(P)$(Q):MAV:ERES") {
  field(CALC, "(A+B+C+D)/16")
  field(INPA, "$(P)$(Q):M1:ERES CP")
  field(PREC, "4")
  field(INPB, "$(P)$(Q):M2:ERES CP")
  field(INPC, "$(P)$(Q):M3:ERES CP")
  field(INPD, "$(P)$(Q):M4:ERES CP")
}

#----------------------- areaDetector overrides for CAM plugin -----------------------
substitute "R=$(Q):"
include "ADBase.template"

record(mbbo, "$(P)$(Q):DataType")
{
   field(ZRST, "$(EMPTY=)")
   field(ZRVL, "$(EMPTY=)")
   field(ONST, "$(EMPTY=)")
   field(ONVL, "$(EMPTY=)")
   field(TWST, "$(EMPTY=)")
   field(TWVL, "$(EMPTY=)")
   field(THST, "$(EMPTY=)")
   field(THVL, "$(EMPTY=)")
   field(FRST, "$(EMPTY=)")
   field(FRVL, "$(EMPTY=)")
   field(FVST, "$(EMPTY=)")
   field(FVVL, "$(EMPTY=)")
   field(SXST, "$(EMPTY=)")
   field(SXVL, "$(EMPTY=)")
   field(VAL, "7")
}

record(mbbo, "$(P)$(Q):ColorMode")
{
   field(DISA, "1")
}

record(ao, "$(P)$(Q):Gain")
{
   field(DISA, "1")
}

record(ai, "$(P)$(Q):Gain_RBV")
{
   field(DISA, "1")
}

record(longout, "$(P)$(Q):BinX")
{
   field(DISA, "1")
}

record(longin, "$(P)$(Q):BinX_RBV")
{
   field(DISA, "1")
}

record(longout, "$(P)$(Q):BinY")
{
   field(DISA, "1")
}

record(longin, "$(P)$(Q):BinY_RBV")
{
   field(DISA, "1")
}

record(longout, "$(P)$(Q):MinX")
{
   field(DISA, "1")
}

record(longin, "$(P)$(Q):MinX_RBV")
{
   field(DISA, "1")
}

record(longout, "$(P)$(Q):MinY")
{
   field(DISA, "1")
}

record(longin, "$(P)$(Q):MinY_RBV")
{
   field(DISA, "1")
}

record(longout, "$(P)$(Q):SizeX")
{
   field(DISA, "1")
}

record(longin, "$(P)$(Q):SizeX_RBV")
{
   field(DISA, "1")
}

record(longout, "$(P)$(Q):SizeY")
{
   field(DISA, "1")
}

record(longin, "$(P)$(Q):SizeY_RBV")
{
   field(DISA, "1")
}

record(bo, "$(P)$(Q):ReverseX")
{
   field(DISA, "1")
}

record(bi, "$(P)$(Q):ReverseX_RBV")
{
   field(DISA, "1")
}

record(bo, "$(P)$(Q):ReverseY")
{
   field(DISA, "1")
}

record(bi, "$(P)$(Q):ReverseY_RBV")
{
   field(DISA, "1")
}

record(ao, "$(P)$(Q):AcquireTime")
{
   field(DISA, "1")
}

record(ai, "$(P)$(Q):AcquireTime_RBV")
{
   field(DISA, "1")
}

record(ao, "$(P)$(Q):AcquirePeriod")
{
   field(DISA, "1")
}

record(ai, "$(P)$(Q):AcquirePeriod_RBV")
{
   field(DISA, "1")
}

record(longout, "$(P)$(Q):NumExposures")
{
   field(DISA, "1")
}

record(longin, "$(P)$(Q):NumExposures_RBV")
{
   field(DISA, "1")
}

record(mbbo, "$(P)$(Q):TriggerMode")
{
   field(ZRST, "Triggered")
   field(ONST, "$(EMPTY=)")
   field(ONVL, "$(EMPTY=)")
   field(VAL, "0")
}

record(mbbi, "$(P)$(Q):TriggerMode_RBV")
{
   field(ZRST, "Triggered")
   field(ONST, "$(EMPTY=)")
   field(ONVL, "$(EMPTY=)")
}

record(stringin, "$(P)$(Q):M1") {
  field(PINI, "YES")
  field(VAL, "$(M1=$(P)$(Q):NOMOTOR)")
}

record(stringin, "$(P)$(Q):M2") {
  field(PINI, "YES")
  field(VAL, "$(M2=$(P)$(Q):NOMOTOR)")
}

record(stringin, "$(P)$(Q):M3") {
  field(PINI, "YES")
  field(VAL, "$(M3=$(P)$(Q):NOMOTOR)")
}

record(stringin, "$(P)$(Q):M4") {
  field(PINI, "YES")
  field(VAL, "$(M4=$(P)$(Q):NOMOTOR)")
}

record(stringin, "$(P)$(Q):M1:DESC") {
  field(PINI, "YES")
  field(INP, "$(M1=$(P)$(Q):NOMOTOR).DESC CP")
}

record(stringin, "$(P)$(Q):M2:DESC") {
  field(PINI, "YES")
  field(INP, "$(M2=$(P)$(Q):NOMOTOR).DESC CP")
}

record(stringin, "$(P)$(Q):M3:DESC") {
  field(PINI, "YES")
  field(INP, "$(M3=$(P)$(Q):NOMOTOR).DESC CP")
}

record(stringin, "$(P)$(Q):M4:DESC") {
  field(PINI, "YES")
  field(INP, "$(M4=$(P)$(Q):NOMOTOR).DESC CP")
}
